package contract

import (
	"github.com/norniastar/infra-core/model/global"
	"time"
)

type RedisOption func(redis IRedis)

// IRedis redis接口
type IRedis interface {
	BitCount(key string, start, end int64) (int64, error)
	BitOp(op, destKey string, keys ...string) (bool, error)
	BitPos(key string, bit bool, start, end int64) (int64, error)
	BLPop(timeout time.Duration, keys ...string) ([]string, error)
	BRPop(timeout time.Duration, keys ...string) ([]string, error)
	Close() error
	Decr(key string) (int64, error)
	DecrBy(key string, decrement int64) (int64, error)
	Del(...string) (int64, error)
	Exists(string) (bool, error)
	ExpireAt(key string, time time.Time) (bool, error)
	Expires(key string, seconds time.Duration) (bool, error)
	Get(key string) (string, error)
	GetBit(key string, offset int64) (bool, error)
	GeoAdd(key string, locations ...global.RedisGeoLocation) (int64, error)
	GeoDist(key string, member1, member2, unit string) (float64, error)
	GeoPos(key string, members ...string) ([]*global.RedisGeoPosition, error)
	GeoRadius(key string, longitude, latitude float64, query global.RedisGeoRadiusQuery) ([]global.RedisGeoLocation, error)
	GeoRadiusByMember(key string, member string, query global.RedisGeoRadiusQuery) ([]global.RedisGeoLocation, error)
	HDel(key string, fields ...string) (int64, error)
	HExists(key, field string) (bool, error)
	HGet(key, field string) (string, error)
	HGetAll(key string) (map[string]string, error)
	HIncrBy(key, field string, increment int64) (int64, error)
	HIncrByFloat(key, field string, increment float64) (float64, error)
	HLen(key string) (int64, error)
	HKeys(key string) ([]string, error)
	HMGet(key string, fields ...string) ([]string, error)
	HMSet(key string, values map[string]any) error
	HScan(key string, cursor uint64, match string, count int64) (map[string]string, uint64, error)
	HSet(key, field, value string) (bool, error)
	HSetNX(key, field, value string) (bool, error)
	HStrLen(key, field string) (int64, error)
	HVals(key string) ([]string, error)
	Incr(key string) (int64, error)
	IncrBy(key string, increment int64) (int64, error)
	LIndex(key string, index int64) (string, error)
	LLen(key string) (int64, error)
	LPop(key string) (string, error)
	LPush(key string, values ...string) (int64, error)
	LPushX(key string, value string) (int64, error)
	LRange(key string, start, stop int64) ([]string, error)
	LRem(key string, count int64, value string) (int64, error)
	LSet(key string, index int64, value string) (bool, error)
	LTrim(key string, start, stop int64) (bool, error)
	RPop(key string) (string, error)
	RPush(key string, values ...string) (int64, error)
	RPushX(key string, value string) (int64, error)
	SAdd(key string, members ...string) (int64, error)
	SCard(key string) (int64, error)
	Set(string, string, ...any) (bool, error)
	SetBit(key string, offset int64, value bool) (bool, error)
	SIsMember(key, member string) (bool, error)
	SMembers(key string) ([]string, error)
	SPop(key string) (string, error)
	Time() (time.Time, error)
	TTL(key string) (time.Duration, error)
	ZAdd(key string, members ...global.RedisZMember) (int64, error)
	ZCard(key string) (int64, error)
	ZCount(key string, min, max float64) (int64, error)
	ZIncrBy(key string, increment float64, member string) (float64, error)
	ZRange(key string, start, stop int64, withscores bool) ([]global.RedisZMember, error)
	ZRangeByScore(key string, min, max string, opt global.RedisZRangeByScore) ([]global.RedisZMember, error)
	ZRank(key, member string) (int64, error)
	ZRem(key string, members ...string) (int64, error)
	ZRemRangeByRank(key string, start, stop int64) (int64, error)
	ZRemRangeByScore(key string, min, max float64) (int64, error)
	ZRevRange(key string, start, stop int64, withScores bool) ([]global.RedisZMember, error)
	ZRevRangeByScore(key string, min, max string, opt global.RedisZRangeByScore) ([]global.RedisZMember, error)
	ZRevRank(key, member string) (int64, error)
	ZScan(key string, cursor uint64, match string, count int64) ([]global.RedisZMember, uint64, error)
	ZScore(key, member string) (float64, error)
}
